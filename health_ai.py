# -*- coding: utf-8 -*-
"""Health AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lofUqENjk30IqBtN5SN6OZVVVea_eg-Z
"""

!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer,AutoMpdelForCausalLM

#Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoModelForCausalLM.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=tprch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda is_available() else None
)

if tokenizer.pad_token is None:
  tokenizer.paf_token = tokenizer.eos_token

def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", trumation=True, max_length=512)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k,v in inputs.items()}

    with torch.no_grad():
      outputs = model.generate(
          **inputs,
    with torch.no_grad():
      outputs = model.generate(
          **inputs,
          max_length=max_length,
          temperature=0.7,
          do_sample=True,
          pad_token_id=tokenizer.eos_token_id
      )
  response = tokenizer.decode(output[0], skip_special_tokens=True)
  response = response.replace(prompt,"").strip()
  return response

def disease_prediction(symptoms):
     prompt = f"Based on the following symptoms,provide possible medicalconditions and generalmediation suggestions. Always emphasize the importance of co"
     return generate_response(prompt, max_length=1200)

# create Gradio interface
with gr.Blocks() as app:
    gr.Markdown("# Medical AI Assistant")
    gr.Markdown("**Disclamier: This is for informational purposes only. Always consult healthcare professional for medical advice.**")
# create Gradio interface
with gr.Blocks() as app:
      gr.Markdown("Medical AI Assistant")
      gr.Markdown("**Disclamier: This is for informational purposes only. Always consult healthcare professionals for medical advice.**")

    with gr.Tabs():
      with gr.TabItem("Disease prediction")
          with gr.Row():
            with gr.column():
                symptoms_input = gr.Textbox(
                    label="Enter syptoms",placeholder="e.g., fever, headache, cough, fatigue..."
                    lines-4
                )
                predict_btn= gr.Button("Analyze symptoms")

          with gr.TabItem("Treatment plans"):
            with gr.Row():
              with gr.column():
                condition_input = gr.Textbox(
                    label="Medical condition",
          with gr.TabItem("Treatment plans"):
            with gr.Row():
              with gr.column():
                condition_input = gr.Textbox(
                    label="Medical Condition",
                    placeholder="e.g., diabetes, hypertension, migraine...",
                    lines=2
                )
                age_input = gr.Number(label="Age", value=30)
                gender_input = gr.Dropdown(
                    choices=["Male", "Female", "other"],
                    label="Gender",
                    value="Male"
                )
                history_input = gr.Textbox(
                    label="Medical History",
                    placeholder="previous conditions, allergies, medications or None",
                    lines=3
                )
                plan_btn = gr.Button("Generate Treatment plan")

          with gr.column():
            plan_output= gr.Textbox(label="personalized Treatment plan", lines=20)

      plan_btn.click(treatment_plan, inputs=[condition_input, age_input, gender_input,history_input], outputs=plan_output)

app.launch(share=True)

